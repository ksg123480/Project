제목 : 계좌관리 DB 구성

생성할 테이블  -------------------------------------------------------------------------------------------------------------

회원테이블(Member)
- 아이디(id varchar2(20))     : PK,
- 비밀번호(pw varchar2(20)) : not null, 3자리 이상
- 회원명(name varchar2(20)) : not null
- 전화번호(phone varchar2(20))

CREATE TABLE MEMBER 
(
  id VARCHAR2(20)
, pw VARCHAR2(20) NOT NULL  constraint emp_pw_min CHECK (LENGTH(pw) >= 3)
, name VARCHAR2(20) NOT NULL 
, phone VARCHAR2(20) 
, CONSTRAINT MEMBER_PK PRIMARY KEY (id)
  ENABLE 
);

계좌타입테이블(AccountType)
- 계좌타입번호(typeid number) : PK 시퀀스 생성 후 사용(seq_typeid,  초기값 1, 증가 1)
- 이름(name varchar2(20)) : 일반계좌, 신용계좌, 기부계좌

CREATE TABLE ACCOUNTTYPE 
(
  TYPEID NUMBER NOT NULL 
, NAME VARCHAR2(20) 
, CONSTRAINT typeid_pk PRIMARY KEY (TYPEID)
  ENABLE 
);

계좌테이블(Account)
- 계좌번호(accid number) : PK  시퀀스생성 후 사용(seq_accid, 초기값 1000, 증가 10 )
- 잔액(balance number) : 기본값 0, 0보다 큰값만 저장 가능
- 계좌종류(typeid number) : FK (계좌타입테이블 >> 계좌타입번호)


CREATE TABLE ACCOUNT 
(
  accid NUMBER NOT NULL 
, balance NUMBER DEFAULT 0 NOT NULL  constraint emp_balance_min CHECK ( balance >= 0)
, TYPEID NUMBER 
, CONSTRAINT ACCOUNT_PK PRIMARY KEY (accid)
,CONSTRAINT ACCOUNT_FK FOREIGN KEY (TYPEID) REFERENCES ACCOUNTTYPE (typeid)
  ENABLE 
);


계좌개설테이블(AccountInfo)
- 거래번호(infoid number) : PK 시퀀스 생성 후 사용(seq_infoid, 초기값1, 증가 1)
- 아이디(id varchar2(20)) : FK(회원테이블 >> 아이디)
- 계좌번호(accid number) : FK(계좌테이블 >> 계좌번호)
- 개설일(newdate date) : not null  <=== 자동으로 현재 날짜저장

CREATE TABLE ACCOUNTINFO 
(
  INFOID NUMBER NOT NULL 
, ID VARCHAR2(20) 
, accid NUMBER 
, newdate DATE NOT NULL 
, CONSTRAINT ACCOUNTINFO_PK PRIMARY KEY 
  (
    INFOID 
  )
  ENABLE 
);

ALTER TABLE ACCOUNTINFO
ADD CONSTRAINT ACCOUNTINFO_FK1 FOREIGN KEY
(
  ID 
)
REFERENCES MEMBER
(
  ID 
)
ENABLE;

ALTER TABLE ACCOUNTINFO
ADD CONSTRAINT ACCOUNTINFO_FK2 FOREIGN KEY
(
  accid 
)
REFERENCES ACCOUNT
(
  ACCID 
)
ENABLE;

거래테이블(AccIO)
- 거래번호(accioid number) : PK 시퀀스 생성후 사용(seq_accioid, 초기값 1, 증가 1)
- 계좌번호(accid number) : FK (계좌테이블 >>계좌번호)
- 입금액(input number) : 기본값 0
- 출금액(output number) : 기본값 0
- 현재 잔액(balance number) 
- 거래 개설일시(dt date) : not null 



CREATE TABLE ACCIO 
(
  ACCIOID NUMBER NOT NULL 
, ACCID NUMBER 
, INPUT NUMBER 
, OUTPUT NUMBER 
, BALANCE NUMBER 
, DT DATE 
, CONSTRAINT ACCIO_PK PRIMARY KEY 
  (
    ACCIOID 
  )
  ENABLE 
);

ALTER TABLE ACCIO
ADD CONSTRAINT ACCIO_FK1 FOREIGN KEY
(
  ACCID 
)
REFERENCES ACCOUNT
(
  ACCID 
)
ENABLE;


단순 기능 쿼리문
[회원 테이블]
1. 회원 가입기능(아이디, 비밀번호, 회원명, 전화번호 사용)
INSERT INTO Member 
VALUES ('one', '111' , '조동광','010.0000.0000');

2. 회원 검색기능(회원번호를 전달하면 비밀번호를 제외한 회원 전체 정보 반환)
SELECT
    member.id, member.name, member.phone
FROM
    member
WHERE
    member.id = 'one'

3. 회원 검색기능(저장된 모든 회원의 아이디 반환)
SELECT
    member.id
FROM
    member

4. 회원 삭제기능(아이디로 회원정보 삭제)
delete
FROM
    member
where 
    member.id = 'one'

5 회원 수정기능(아이디, 새로운 전화번호를 전달하면 해당 아이디에 해당하는 전화번호 수정)

update Member 
set phone = '010.1111.1111'
where id = 'one'

[계좌타입테이블]
6. 계좌 저장기능(이름 사용)
INSERT INTO AccountType
VALUES (SEQ_TYPEID.nextval,'사용자');

7. 계좌 정보 전체 출력 기능(계좌타입번호, 이름)
select *
    FROM AccountType

8. 검색기능(계좌타입번호 전달, 이름 반환)
select name
    FROM AccountType
    where typeid = 1


9. 검색기능(이름전달, 계좌타입번호 반환)
select typeid 
    FROM AccountType
    where name= 1

[계좌테이블]
10. 입력기능(잔액, 계좌종류 사용)

INSERT INTO Account
VALUES (SEQ_ACCID.nextval,10000,1);

11. 검색기능(계좌번호 전달하면 해당 계좌의 모든 정보 반환)

SELECT
    *
FROM
account
where accid = 1010

12. 검색기능(계좌테이블에 저장된 모든 계좌번호 반환)

SELECT
    accid
FROM
account

13. 검색기능(저장된 계좌테이블에 잔액이 0인 계좌의 계좌번호반환)

SELECT
    accid
FROM
account
where balance = 0

14. 검색기능(계좌번호를 전달하면 해당 계좌의 잔액 반환)
SELECT
    balance 
FROM
account
where accid= 1010


[계좌개설 테이블]
15. 입력기능(아이디, 계좌번호 사용, 개설일 자동 할당)
INSERT INTO AccountInfo
VALUES (seq_infoid.nextval,'one',1010,sysdate);

16. 검색기능(아이디입력시 그 아이디로 만들어진 모든 계좌정보 반환)
SELECT
    * 
FROM
accountinfo
where id= 'one'

17. 검색기능(계좌번호 입력시 그 계좌번호의 모든 정보 반환)
SELECT
    * 
FROM
accountinfo
where accid= 1010

복합 기능 쿼리문

18. 회원id를 입력하면 그 회원의 모든 계좌정보 반환(회원id, 계좌번호, 잔액, 계좌정보(일반계좌.등등), 계좌개설일

select m.id,a.accid,a.balance,t.name,f.newdate
from member m,account a ,accountinfo f, accounttype t 
where m.id ='one'

19. 회원id를 입력하면 그 회원이 개설한 계좌의 갯수를 반환
select count(*) "계좌갯수"
from member m,account a ,accountinfo f, accounttype t 
where m.id ='one'

20. 입금 거래 발생시 거래테이블에 정보 저장(입금시-계좌번호, 입금액-입금이 된후잔액전달)
INSERT INTO accio
VALUES (seq_accioid.nextval,1010,1000,NULL,(select balance from account where accid = 1010)+1000,sysdate);


UPDATE account a 
SET a.balance = ( SELECT balance FROM (SELECT * FROM accio where accid = 1010 ORDER BY accioid DESC) WHERE ROWNUM = 1 )
WHERE accid = 1010;


21. 출금 거래 발생시 거래테이블에 정보 저장(출금시-계좌번호, 출금액-출금후 잔액전달)
INSERT INTO accio
VALUES (seq_accioid.nextval,1010,NULL,2000,(select balance from account where accid = 1010)-2000,sysdate);


UPDATE account a 
SET a.balance = ( SELECT balance FROM (SELECT * FROM accio where accid = 1010 ORDER BY accioid DESC) WHERE ROWNUM = 1 )
WHERE accid = 1010;

22. 계좌 개설시 거래테이블에 입금정보 추가 
INSERT INTO accio
VALUES (seq_accioid.nextval,(SELECT accid 
FROM(
    SELECT 
        * 
    FROM account
    ORDER BY ROWNUM DESC)
WHERE ROWNUM = 1),

(SELECT balance 
FROM(
    SELECT 
        * 
    FROM account
    ORDER BY ROWNUM DESC)
WHERE ROWNUM = 1),

NULL,(SELECT balance 
FROM(
    SELECT 
        * 
    FROM account
    ORDER BY ROWNUM DESC)
WHERE ROWNUM = 1),sysdate);



23. 계좌번호를 입력하면 해당 계좌의 거래 리스트를 반환
select *
from accio
where accid = 1010;
 

제출내용(메모장으로) ---------------------------------------------------------------------------------------------------------------------------
- 각 테이블을 생성하는 쿼리문 , 각 테이블을 삭제하는 쿼리문, 각 테이블의 데이터를 삭제하는 쿼리문 <==== DDL문




- 각 시퀀스를 생성하는 쿼리문

create sequence seq_typeid
increment by 1
start with 1;

create sequence seq_accid
increment by 1000
start with 10;

create sequence seq_infoid
increment by 1
start with 1;

create sequence seq_accioid
increment by 1
start with 1;

- 각 기능 쿼리문
- 각 복합 쿼리문
